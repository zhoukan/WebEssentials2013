<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BestPracticeAddMissingStandardDirective" xml:space="preserve">
    <value>浏览器兼容性: 添加缺失的标准指令 ({0})</value>
  </data>
  <data name="BestPracticeAddMissingStandardProperty" xml:space="preserve">
    <value>浏览器兼容性: 添加缺失的标准属性 ({0})</value>
  </data>
  <data name="BestPracticeAddMissingVendorSpecific" xml:space="preserve">
    <value>浏览器兼容性: 添加缺失的供应商特定属性到 '{0}' ({1})</value>
  </data>
  <data name="BestPracticeAddMissingVendorSpecificDirective" xml:space="preserve">
    <value>浏览器兼容性: 添加缺失的供应商特定指令到 '{0}' ({1})</value>
  </data>
  <data name="BestPracticeDuplicatePropertyInRule" xml:space="preserve">
    <value>最佳方法: 在规则中已经指定属性 '{0}'。删除任何不需要的重复项</value>
  </data>
  <data name="BestPracticeDuplicatePropertyWithSameValueInRule" xml:space="preserve">
    <value>最佳方法: 在规则中已经指定了有相同值的属性 '{0}'，应该删除。</value>
  </data>
  <data name="BestPracticeDuplicateSelectors" xml:space="preserve">
    <value>最佳方法: 完全相同的选择器已定义在 '{0}' 行，考虑合并重复的样式规则</value>
  </data>
  <data name="BestPracticeInlineIncompat" xml:space="preserve">
    <value>最佳方法: '{0}' 属性与 'display: inline' 不起作用，应该删除</value>
  </data>
  <data name="BestPracticePseudosAfterOtherSelectors" xml:space="preserve">
    <value>最佳方法: "{0}" 应放在任何伪类/元素之前</value>
  </data>
  <data name="BestPracticeStandardPropertyOrder" xml:space="preserve">
    <value>浏览器兼容性: 将标准属性低于它的供应商特定的实现</value>
  </data>
  <data name="BestPracticeZeroUnit" xml:space="preserve">
    <value>最佳方法: 当值为零时不指定单位类型 ({0})。(在工具 -&gt; 选项禁用此检查)</value>
  </data>
  <data name="IE6OnlyPropertyHackName" xml:space="preserve">
    <value>仅在 IE6 中可见</value>
  </data>
  <data name="IE6OnlySelectorHackSmartTagActionName" xml:space="preserve">
    <value>仅在 IE6 中可见</value>
  </data>
  <data name="IE7AboveSelectorHackSmartTagActionName" xml:space="preserve">
    <value>使 IE7 及以上可见</value>
  </data>
  <data name="IE7BelowPropertyHackName" xml:space="preserve">
    <value>使 IE7 及以下可见</value>
  </data>
  <data name="IE7OnlySelectorHackSmartTagActionName" xml:space="preserve">
    <value>仅在 IE7 中可见</value>
  </data>
  <data name="IE8AboveSelectorHackSmartTagActionName" xml:space="preserve">
    <value>使 IE8 及以上可见</value>
  </data>
  <data name="LessImportOnceDeprecated" xml:space="preserve">
    <value>"@import-once" 指令在 LESS 1.4 中已被移除。请使用 "@import" 代替。</value>
  </data>
  <data name="OverQualifiedSmartTagActionName" xml:space="preserve">
    <value>裁剪超过限定的选择器</value>
  </data>
  <data name="PerformanceDontOverQualifySelectors" xml:space="preserve">
    <value>性能: 不超过限定选择器。在 "{0}" ({1}) 之前删除所有选择器。ID 必须是每个web页只能出现一次，不需要进一步的资格。</value>
  </data>
  <data name="PerformanceDontUseStarSelector" xml:space="preserve">
    <value>性能: 从不使用通用的选择器。它对浏览器的呈现有大负面性能影响。</value>
  </data>
  <data name="PerformanceEmbedImageAsDataUri" xml:space="preserve">
    <value>性能: 图像只有 {0} 字节，并应嵌入 base64 dataURI 以减少 HTTP 请求数量。</value>
  </data>
  <data name="PerformanceUseShorthand" xml:space="preserve">
    <value>性能: 使用速记符号。属性 {0} 可以通过 {1} 替换</value>
  </data>
  <data name="RemoveSelectorHackSmartTagActionName" xml:space="preserve">
    <value>删除 IE 选择器 hack</value>
  </data>
  <data name="RemoveUnusedCssRuleSmartTagActionName" xml:space="preserve">
    <value>删除未使用的规则</value>
  </data>
  <data name="ReverseEmbedSmartTagActionName" xml:space="preserve">
    <value>保存到文件</value>
  </data>
  <data name="StandardSmartTagActionName" xml:space="preserve">
    <value>添加缺失的标准属性 ({0})</value>
  </data>
  <data name="UpdateEmbedSmartTagActionName" xml:space="preserve">
    <value>从"{0}"重新嵌入 dataUri</value>
  </data>
  <data name="UrlSmartTagActionName" xml:space="preserve">
    <value>嵌入 base64 dataUri</value>
  </data>
  <data name="ValidationColorValuesInRange" xml:space="preserve">
    <value>验证 (WE): 值必须介于0和255之间</value>
  </data>
  <data name="ValidationDeprecatedVendorDeclaration" xml:space="preserve">
    <value>验证 (WE): "{0}" 已被弃用，可以安全地删除。使用未加前缀的标准属性。</value>
  </data>
  <data name="ValidationPseudoOrder" xml:space="preserve">
    <value>验证 (WE): 伪元素 ("{0}") 必须在伪类 ("{1}") 之后指定。</value>
  </data>
  <data name="ValidationVendorDeclarations" xml:space="preserve">
    <value>验证 (WE): "{0}" 不是有效的供应商特定属性，或它可能已被否决。</value>
  </data>
  <data name="ValidationVendorDirective" xml:space="preserve">
    <value>验证 (WE): "{0}" 不是一个有效的供应商特定 @-指令，或它可能已被否决。</value>
  </data>
  <data name="ValidationVendorPseudo" xml:space="preserve">
    <value>验证 (WE): "{0}"不是有效的供应商特定伪类/元素或它可能已被否决。</value>
  </data>
  <data name="VendorOrderSmartTagActionName" xml:space="preserve">
    <value>移除以下供应商特定属性</value>
  </data>
  <data name="VendorSmartTagActionName" xml:space="preserve">
    <value>添加缺失的供应商详情</value>
  </data>
</root>